from django.db import models
from app_bettirelax.models import Service, ServicePrice
from django.contrib.auth.models import User
from django_quill.fields import QuillField
from django.core.mail import send_mail
from django.conf import settings
from django.utils.html import strip_tags
import re

# Create your models here.
class OpeningHours(models.Model):
    DAY_CHOICES = [
        (0, 'H√©tf≈ë'),
        (1, 'Kedd'),
        (2, 'Szerda'),
        (3, 'Cs√ºt√∂rt√∂k'),
        (4, 'P√©ntek'),
        (5, 'Szombat'),
        (6, 'Vas√°rnap'),
    ]

    day_of_week = models.IntegerField(choices=DAY_CHOICES, verbose_name="Nap")
    is_even_week = models.BooleanField(default=True, verbose_name="P√°ros h√©t?")  
    start_time = models.TimeField(verbose_name="Nyit√°s")
    end_time = models.TimeField(verbose_name="Z√°r√°s")

    def __str__(self):
        week_type = "P√°ros h√©t" if self.is_even_week else "P√°ratlan h√©t"
        return f"{self.get_day_of_week_display()} ({week_type}): {self.start_time} - {self.end_time}"

    class Meta:
        verbose_name = "Nyitvatart√°s"
        verbose_name_plural = "Nyitvatart√°sok"
        unique_together = ('day_of_week', 'is_even_week', 'start_time', 'end_time')

class BookingSettings(models.Model):
    is_booking_enabled = models.BooleanField(default=True, verbose_name="Foglal√°si rendszer bekapcsolva?")
    is_reviews_enabled = models.BooleanField(default=True, verbose_name="Reviewk megjen√≠t√©se?")
    max_weeks_in_advance = models.PositiveIntegerField(default=4, verbose_name="H√°ny h√©tre el≈ëre lehet foglalni? (1-12)", choices=[(i, f"{i} h√©t") for i in range(1, 13)])
    min_hours_before_booking = models.PositiveIntegerField(default=24, verbose_name="Legk√©s≈ëbb mennyivel el≈ëre lehet foglalni? (√≥r√°kban)")
    auto_reject_time = models.PositiveIntegerField(default=12, verbose_name="Mennyi id≈ë ut√°n utas√≠tsuk el automatikusan? (√≥r√°kban)")
    booking_puffer =  models.DecimalField(max_digits=3, decimal_places=0, default=0, verbose_name="puffer id≈ë (percekben)")

    terms_conditions_pdf = models.FileField(upload_to='pdfs/', blank=True, null=True, verbose_name="Felhaszn√°l√°si felt√©telek PDF")
    contraindications_pdf = models.FileField(upload_to='pdfs/', blank=True, null=True, verbose_name="Ellenjavallatok PDF")
    privacy_policy_pdf = models.FileField(upload_to='pdfs/', blank=True, null=True, verbose_name="Adatv√©delmi ir√°nyelvek PDF")

    def __str__(self):
        return "Foglal√°si rendszer be√°ll√≠t√°sai"

    class Meta:
        verbose_name = "Foglal√°si be√°ll√≠t√°sok"
        verbose_name_plural = "Foglal√°si be√°ll√≠t√°sok"

class Booking(models.Model):
    STATUS_CHOICES = [
        ('pending', 'F√ºgg≈ëben'),
        ('accepted', 'Elfogadva'),
        ('cancelled', 'Lemondva'),
        ('post_cancelled', 'Ut√≥lag Lemondva'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True, editable=False,  verbose_name="Foglal√≥")
    date = models.DateField(verbose_name="D√°tum", null=True) 
    start_time = models.TimeField(verbose_name="Kezd√©s")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name='Foglal√°s st√°tusza')
    booked_service_type = models.CharField(max_length=30, default="", verbose_name='Massz√°zs fajt√°ja')

    customer_name = models.CharField(max_length=255, default='', verbose_name="Foglal√≥ neve",)
    customer_email = models.EmailField(default='', verbose_name="Foglal√≥ email c√≠me")
    customer_phone = models.CharField(max_length=20, default='', verbose_name="Vev≈ë telefonsz√°ma")

    booked_service_length = models.PositiveIntegerField(default=30, verbose_name="Szolg√°ltat√°s id≈ëtartama (perc)")
    booked_service_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, editable=False, verbose_name="Szolg√°ltat√°s √°ra (Ft)")

    created_at = models.DateTimeField(auto_now_add=True, null=True)
    admin_token = models.CharField(max_length=64, unique=True, blank=True, editable=False, null=True)  # üîë √öj mez≈ë

    def save(self, *args, **kwargs):
        is_new = self.pk is None  # Ellen≈ërizz√ºk, hogy √∫j objektum-e

        if is_new:
            self.send_status_email() 

        elif not is_new:  # Csak megl√©v≈ë objektum eset√©n ellen≈ërizz√ºk a st√°tuszt
            original = Booking.objects.get(pk=self.pk)
            if original.status != self.status:
                self.send_status_email()  # Automatikusan k√ºld√ºnk emailt a st√°tusz v√°ltoz√°skor

        super().save(*args, **kwargs)  # Mentj√ºk az objektumot

    def send_status_email(self):
        """Email k√ºld√©s a foglal√°s st√°tusz√°nak v√°ltoz√°sa eset√©n."""
        subject = ""

        try:
            template = EmailTemplate.objects.get(type=self.status)  # A st√°tusznak megfelel≈ë sablon lek√©r√©se
            email_body = template.content.html  # HTML verzi√≥
            
            # HTML tagek helyettes√≠t√©se √∫j sorokkal
            plain_body = re.sub(r'<br\s*/?>', '\n', email_body)  # <br> ‚Üí √∫j sor
            plain_body = re.sub(r'</p>', '\n', plain_body)  # </p> ‚Üí √∫j sor
            plain_body = strip_tags(plain_body).strip()  # Elt√°vol√≠tjuk a marad√©k HTML-t
        except EmailTemplate.DoesNotExist:
            plain_body = "Tisztelt √ºgyfel√ºnk,\n\nA foglal√°s√°val kapcsolatban v√°ltoz√°s t√∂rt√©nt."

        # Foglal√°s adatai blokk
        booking_details = (
            f"\n\nFoglal√°s adatai:\n"
            f"Id≈ëpont: {self.date} {self.start_time.strftime('%H:%M')}\n"
            f"Szolg√°ltat√°s: {self.booked_service_type}\n"
            f"N√©v: {self.customer_name}\n"
            f"Email: {self.customer_email}\n"
            f"St√°tusz: {self.get_status_display()}\n"
        )

        # Email teljes tartalm√°nak √∂ssze√°ll√≠t√°sa
        message = plain_body + booking_details

        # Email t√°rgy be√°ll√≠t√°sa
        if self.status == "accepted":
            subject = "Foglal√°sod meger≈ës√≠tve - Betti Relax"
        elif self.status == "pending":
            subject = "Foglal√°sod fogadtuk - Betti Relax"
        elif self.status == "cancelled":
            subject = "Foglal√°sod t√∂r√∂lve - Betti Relax"
        elif self.status == "post_cancelled":
            subject = "Fontos: foglal√°sod t√∂rl√©sre ker√ºlt - Betti Relax"

        if subject:
            send_mail(
                subject,
                message,
                settings.EMAIL_HOST_USER,
                [self.customer_email],
                fail_silently=False,
            )

    def __str__(self):
        return f"{self.customer_name} - {self.booked_service_type} ({self.date} {self.start_time})"
    
class EmailTemplate(models.Model):
    TYPE_CHOICES = [ 
        ("pending", "F√ºgg≈ëben l√©v≈ë foglal√°s"),
        ("accepted", "Elfogadott foglal√°s"),
        ("cancelled", "Elutas√≠tott foglal√°s"),
        ("post_cancelled", "Ut√≥lag elutas√≠tott foglal√°s"),
        ("reminder", "Foglal√°si eml√©keztet≈ë"),
    ]

    type = models.CharField(max_length=30, choices=TYPE_CHOICES, unique=True)
    content = QuillField()

    def __str__(self):
        return dict(self.TYPE_CHOICES).get(self.type, self.type)
    
    class Meta:
        verbose_name = "Email sablon"
        verbose_name_plural = "Email sablonok"