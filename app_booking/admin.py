from django.contrib import admin
from .models import OpeningHours, BookingSettings, Booking, EmailTemplate
from django import forms
from django.urls import path
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.shortcuts import render

# "Foglal√°si rendszer" c√≠mk√©vel ell√°tott szekci√≥ l√©trehoz√°sa az adminban
admin.site.site_header = "Foglal√°si rendszer"
admin.site.index_title = "Foglal√°si rendszer adminisztr√°ci√≥"
admin.site.site_title = "Foglal√°si rendszer admin"

class InstanceCounterMixin1():
    def has_add_permission(self, request):
        num_objects = self.model.objects.count()
        if num_objects >= 1:
            return False
        else:
            return True


class CustomOpeningHoursForm(forms.Form):
    """Form az egyedi admin szerkeszt≈ë n√©zethez, 24 √≥r√°s id≈ëform√°tummal"""
    DAYS = [
        (0, 'H√©tf≈ë'),
        (1, 'Kedd'),
        (2, 'Szerda'),
        (3, 'Cs√ºt√∂rt√∂k'),
        (4, 'P√©ntek'),
        (5, 'Szombat'),
        (6, 'Vas√°rnap'),
    ]

    time_format = "%H:%M"  # 24 √≥r√°s id≈ëform√°tum

    for day in DAYS:
        locals()[f"start_even_{day[0]}"] = forms.TimeField(
            required=False, label=f"{day[1]} (P√°ros h√©t) - Nyit√°s",
            widget=forms.TimeInput(format=time_format, attrs={'class': 'timepicker'}))
        locals()[f"end_even_{day[0]}"] = forms.TimeField(
            required=False, label=f"{day[1]} (P√°ros h√©t) - Z√°r√°s",
            widget=forms.TimeInput(format=time_format, attrs={'class': 'timepicker'}))
        locals()[f"start_odd_{day[0]}"] = forms.TimeField(
            required=False, label=f"{day[1]} (P√°ratlan h√©t) - Nyit√°s",
            widget=forms.TimeInput(format=time_format, attrs={'class': 'timepicker'}))
        locals()[f"end_odd_{day[0]}"] = forms.TimeField(
            required=False, label=f"{day[1]} (P√°ratlan h√©t) - Z√°r√°s",
            widget=forms.TimeInput(format=time_format, attrs={'class': 'timepicker'}))
        
    def clean(self):
        """Valid√°lja, hogy a kezd√©si id≈ëpont kor√°bban legyen a z√°r√°sn√°l."""
        cleaned_data = super().clean()
        errors = {}

        for day, label in self.DAYS:
            start_even = cleaned_data.get(f"start_even_{day}")
            end_even = cleaned_data.get(f"end_even_{day}")
            start_odd = cleaned_data.get(f"start_odd_{day}")
            end_odd = cleaned_data.get(f"end_odd_{day}")

            if start_even and end_even and start_even >= end_even:
                errors[f"start_even_{day}"] = f"A nyit√°s nem lehet k√©s≈ëbb vagy ugyanakkor, mint a z√°r√°s!"
                errors[f"end_even_{day}"] = f"A z√°r√°s nem lehet kor√°bban vagy ugyanakkor, mint a nyit√°s"
            if start_even and not end_even:
                errors[f"end_even_{day}"] = f"K√©rlek a z√°r√°si id≈ëpontot is t√∂lsd ki!"           
            if end_even and not start_even:
                errors[f"start_even_{day}"] = f"K√©rlek a nyit√°si id≈ëpontot is t√∂lsd ki!"

            if start_odd and end_odd and start_odd >= end_odd:
                errors[f"start_odd_{day}"] = f"A nyit√°s nem lehet k√©s≈ëbb vagy ugyanakkor, mint a z√°r√°s!"
                errors[f"end_odd_{day}"] = f"A z√°r√°s nem lehet kor√°bban vagy ugyanakkor, mint a nyit√°s"
            if start_odd and not end_odd:
                errors[f"end_odd_{day}"] = f"K√©rlek a z√°r√°si id≈ëpontot is t√∂lsd ki!"                
            if end_odd and not start_odd:
                errors[f"start_odd_{day}"] = f"K√©rlek a nyit√°si id≈ëpontot is t√∂lsd ki!"
                
        if errors:
            for key, value in errors.items():
                self.add_error(key, value)  # üî• Hiba√ºzenetek hozz√°rendel√©se a mez≈ëkh√∂z
            raise forms.ValidationError("K√©rlek jav√≠tsd a fenti hib√°kat!")

        return cleaned_data

class OpeningHoursAdmin(admin.ModelAdmin):
    """Egyedi admin n√©zet a nyitvatart√°si id≈ëk be√°ll√≠t√°s√°ra"""

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path("custom/", self.admin_site.admin_view(self.custom_view), name="custom_opening_hours"),  # üî• Itt nevezz√ºk el helyesen!
        ]
        return custom_urls + urls

    def custom_view(self, request):
        """Egyedi admin oldal a nyitvatart√°s kezel√©s√©re"""

        initial_data = {}
        for entry in OpeningHours.objects.all():
            key_prefix = "even" if entry.is_even_week else "odd"
            initial_data[f"start_{key_prefix}_{entry.day_of_week}"] = entry.start_time.strftime("%H:%M") 
            initial_data[f"end_{key_prefix}_{entry.day_of_week}"] = entry.end_time.strftime("%H:%M")

        if request.method == "POST":
            form = CustomOpeningHoursForm(request.POST, initial=initial_data)
            if form.is_valid():
                # üî• 2Ô∏è‚É£ Adatok ment√©se az adatb√°zisba
                OpeningHours.objects.all().delete()
                for day, _ in form.DAYS:
                    start_even = form.cleaned_data.get(f"start_even_{day}")
                    end_even = form.cleaned_data.get(f"end_even_{day}")
                    start_odd = form.cleaned_data.get(f"start_odd_{day}")
                    end_odd = form.cleaned_data.get(f"end_odd_{day}")

                    if start_even and end_even:
                        OpeningHours.objects.create(
                            day_of_week=day, is_even_week=True, start_time=start_even, end_time=end_even)
                    if start_odd and end_odd:
                        OpeningHours.objects.create(
                            day_of_week=day, is_even_week=False, start_time=start_odd, end_time=end_odd)

                return HttpResponseRedirect(reverse("admin:index"))  # üî• Ment√©s ut√°n vissza az adminba
            
            else:
                # üî• Ha a form nem valid, akkor adjuk vissza az eddigi adatokat (ne t√∂rl≈ëdjenek el)
                for day, _ in form.DAYS:
                    for key_prefix in ["start_even_", "end_even_", "start_odd_", "end_odd_"]:
                        field_key = f"{key_prefix}{day}"
                        if field_key in request.POST:
                            initial_data[field_key] = request.POST[field_key]

        else:
            form = CustomOpeningHoursForm(initial=initial_data)

        return render(request, "admin/custom_opening_hours.html", {"form": form, "opts": self.model._meta})


    def changelist_view(self, request, extra_context=None):
        """Amikor a felhaszn√°l√≥ a Nyitvatart√°sok admin linkre kattint, automatikusan a custom szerkeszt≈ë oldalra ir√°ny√≠tjuk."""
        return HttpResponseRedirect(reverse("admin:custom_opening_hours"))


class BookingSettingsAdmin(InstanceCounterMixin1, admin.ModelAdmin):
    model = BookingSettings
    list_display = ('is_booking_enabled', 'max_weeks_in_advance', 'min_hours_before_booking', 'auto_reject_time')
    list_display_links = ('is_booking_enabled',)  # Kattinthat√≥v√° tessz√ºk az els≈ë mez≈ët
    list_editable = ('max_weeks_in_advance', 'min_hours_before_booking', 'auto_reject_time')


    class Meta:
        verbose_name = "Foglal√°si be√°ll√≠t√°sok"
        verbose_name_plural = "Foglal√°si be√°ll√≠t√°sok"

@admin.register(EmailTemplate)
class EmailTemplateAdmin(admin.ModelAdmin):
    list_display = ("type",)
    search_fields = ("type",)
    
# Regisztr√°ljuk a custom admin n√©zetet
admin.site.register(OpeningHours, OpeningHoursAdmin)
admin.site.register(BookingSettings, BookingSettingsAdmin)
admin.site.register(Booking)


